##########
# Possible values : true|false
# If false, the connection won't be wrapped into the Analyzer.
##########
analyzer.active=true

##########
# Possible values : true|false
# If true, the analyzer.storage.path and analyzer.maxSizeInMemory are required.
# Otherwise, all statements will be cached in memory.
# The maxSizeInMemory is the maximum number of statement to keep in memory before
# saving the result on disk.
##########
analyzer.useDiskStorage=false
analyzer.maxSizeInMemory=100
analyzer.storage.path=./target/SQLIAnalyzer

##########
# In some case, the application might generate different query intentionally
# to optimize the database. This property allows to simplify the SQL statement
# to avoid raising a flag.
# For example, if the application split the clients data into multiple tables
# like this : Stats_<ClientID>, we might have multiple query from the same
# entry point. The following regex should solve the issue.
# analyzer.regex.simplifiers=Stats_[0-9]+=Stats_
#
# Comma separated list.
##########
analyzer.regex.simplifiers=Stats_[0-9]+=Stats_,\
                           Structs_[0-9]+=Structs_,\
                           notvalid

##########
# The configuration to the real JDBC driver.
# Both properties are required for the Analyzer to work.
# -----
# Example:
#   - MySQL:
#analyzer.real.driver=com.mysql.jdbc.Driver
#analyzer.real.jdbc=mysql
# 
#   - Oracle:
#realDriver=oracle.jdbc.OracleDriver
#realJDBCType=oracle
##########
analyzer.real.driver=org.h2.Driver
analyzer.real.jdbc=h2

##########
# Define with package should be considered as the entry point 
# of the generated Statement.
# If, for example, you specify com.pld.sqli.demo as the entry point package,
# the first class in the Thread.currentThread().getStackTrace() that match it
# will be the design entry point.
##########
analyzer.entrypoint.packages=org.hackerpeers.sqli.spec

##########
# The safe zone is a list of prefixes that we trust as entry points and
# that we don't need to check.
# For example:
#   analyzer.entrypoint.safezones=com.pld.sqli.demo.test,\
#                                 com.pld.sqli.demo.test2.DemoIgnored#,\
#                                 com.pld.sqli.demo.test3.DemoIngored#doDemo()
#
# In the previous example, all the following entry points will be ignored:
#   packages/classes starting with 'com.pld.sqli.demo.test'
#   all methods from class 'com.pld.sqli.demo.test2.DemoIgnored'
#   all methods named 'doDemo' in class 'com.pld.sqli.demo.test3.DemoIngored'
##########
analyzer.entrypoint.safezones=org.hackerpeers.sqli.demo.test.,\
                              org.hackerpeers.sqli.demo.test2.DemoIgnored#,\
                              org.hackerpeers.sqli.demo.test3.DemoIngored#doDemo()

##########
# Define the minimum time in millisecond that a statement must take to be logged.
# We can than manage to information that we want to log through the logging configuration.
# IMPORTANT: Except if the analyzer.active is false, the log setting will always applied.
##########
analyzer.log.threshold.warning=ABC
analyzer.log.threshold.info=1000
analyzer.log.threshold.fine=0
